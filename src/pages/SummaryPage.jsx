// src/pages/Summary.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { RefreshCw, Printer, Eye, CalendarDays } from 'lucide-react';
import { api } from '../utils/api';

/* -------------------- tiny helpers -------------------- */
const fmtInt = (n) => (Number.isFinite(n) ? n.toLocaleString() : '0');
const fmtMoney = (n) =>
  Number.isFinite(n) ? n.toLocaleString(undefined, { style: 'currency', currency: 'USD' }) : '$0.00';

function buildReceiptHTML(summary, { period, range, asOf, title }) {
  // summary: { inventories: [...] } from API
  const style = `
  <style>
    @page { size: A4; margin: 16mm; }
    body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji"; color:#111827; }
    h1 { font-size: 20px; margin: 0 0 4px; }
    h2 { font-size: 16px; margin: 16px 0 8px; }
    .muted { color:#6B7280; font-size: 12px; }
    .kpis { display: grid; grid-template-columns: repeat(4, 1fr); gap: 12px; margin: 10px 0 18px; }
    .card { border:1px solid #E5E7EB; border-radius: 10px; padding: 10px 12px; }
    .label { color:#6B7280; font-size: 12px; text-transform: uppercase; letter-spacing:.04em; }
    .value { font-weight: 700; font-size: 20px; margin-top: 6px; }
    table { width:100%; border-collapse: collapse; margin-top: 8px; }
    th, td { border:1px solid #E5E7EB; padding: 8px 10px; font-size: 12px; }
    th { background:#F9FAFB; text-align: left; color:#374151; }
    .inv { margin: 18px 0 10px; border-top:2px solid #F3F4F6; padding-top: 12px; }
    .footer { margin-top: 16px; font-size: 11px; color:#6B7280; }
  </style>`;

  const sections = (summary.inventories || []).map((inv) => {
    const orders = inv?.sales?.totals?.orders ?? 0;
    const items = inv?.sales?.totals?.quantity ?? 0;
    const revenue = inv?.sales?.totals?.revenue ?? 0;
    const stockQty = inv?.stock?.totals?.totalQuantity ?? 0;
    const stockItems = inv?.stock?.totals?.items ?? 0;

    const salesRows = (inv?.sales?.byProduct || [])
      .sort((a, b) => (b.revenue ?? 0) - (a.revenue ?? 0))
      .slice(0, 12)
      .map(
        (r) => `<tr>
          <td>${r.productName || `#${r.productId}`}</td>
          <td>${r?.unit?.name || ''}</td>
          <td style="text-align:right">${fmtInt(r.quantitySold || 0)}</td>
          <td style="text-align:right">${fmtMoney(r.revenue || 0)}</td>
        </tr>`
      )
      .join('');

    const stockRows = (inv?.stock?.byProduct || [])
      .sort((a, b) => (b.stockQuantity ?? 0) - (a.stockQuantity ?? 0))
      .slice(0, 12)
      .map(
        (r) => `<tr>
          <td>${r.productName || `#${r.productId}`}</td>
          <td>${r?.unit?.name || ''}</td>
          <td style="text-align:right">${fmtInt(r.stockQuantity || 0)}</td>
        </tr>`
      )
      .join('');

    return `
      <div class="inv">
        <h2>${inv.inventoryName || `Inventory ${inv.inventoryId}`}</h2>
        <div class="kpis">
          <div class="card"><div class="label">Orders</div><div class="value">${fmtInt(orders)}</div></div>
          <div class="card"><div class="label">Items sold</div><div class="value">${fmtInt(items)}</div></div>
          <div class="card"><div class="label">Revenue</div><div class="value">${fmtMoney(revenue)}</div></div>
          <div class="card"><div class="label">Stock (qty / items)</div><div class="value">${fmtInt(stockQty)} / ${fmtInt(
      stockItems
    )}</div></div>
        </div>

        <div>
          <div class="label" style="margin:8px 0 4px">Top sales</div>
          <table>
            <thead><tr><th>Product</th><th>Unit</th><th style="text-align:right">Qty</th><th style="text-align:right">Revenue</th></tr></thead>
            <tbody>${salesRows || `<tr><td colspan="4" class="muted">No sales</td></tr>`}</tbody>
          </table>
        </div>

        <div>
          <div class="label" style="margin:12px 0 4px">Stock snapshot</div>
          <table>
            <thead><tr><th>Product</th><th>Unit</th><th style="text-align:right">Qty</th></tr></thead>
            <tbody>${stockRows || `<tr><td colspan="3" class="muted">No stock</td></tr>`}</tbody>
          </table>
        </div>
      </div>`;
  });

  return `
  <!doctype html>
  <html>
    <head>
      <meta charset="utf-8" />
      <title>${title || 'Inventory Summary'}</title>
      ${style}
    </head>
    <body>
      <div>
        <h1>${title || 'Inventory Summary'}</h1>
        <div class="muted">Period: ${period.toUpperCase()} • Range: ${range?.start?.slice(0,10)} → ${range?.end?.slice(0,10)} • Generated: ${asOf}</div>
        ${sections.join('')}
        <div class="footer">© ${(new Date()).getFullYear()} — Generated by Inventory Console</div>
      </div>
      <script>window.focus && window.focus();</script>
    </body>
  </html>`;
}

/* -------------------- simple modal -------------------- */
function Modal({ open, title, onClose, children }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-[100] grid place-items-center bg-black/40 p-4">
      <div className="w-full max-w-5xl rounded-2xl bg-white shadow-xl">
        <div className="flex items-center justify-between border-b px-5 py-3">
          <div className="text-lg font-semibold text-slate-900">{title}</div>
          <button
            onClick={onClose}
            className="rounded-lg border border-slate-300 bg-white px-3 py-1.5 text-sm hover:bg-slate-50"
          >
            Close
          </button>
        </div>
        <div className="h-[70vh] overflow-hidden">{children}</div>
      </div>
    </div>
  );
}

/* -------------------- page -------------------- */
export default function Summary() {
  const [period, setPeriod] = useState('monthly');
  const [inventoryId, setInventoryId] = useState('');
  const [data, setData] = useState(null);
  const [err, setErr] = useState('');
  const [loading, setLoading] = useState(true);

  // preview modal
  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewUrl, setPreviewUrl] = useState('');

  async function fetchSummary() {
    try {
      setLoading(true);
      setErr('');
      const res = await api.get('/summary', {
        params: { period, ...(inventoryId ? { inventoryId } : {}) },
      });
      const payload = res?.data?.data || res?.data || {};
      setData(payload);
    } catch (e) {
      setErr(e?.response?.data?.message || e?.message || 'Error fetching summary');
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    fetchSummary();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [period, inventoryId]);

  const allInventories = useMemo(() => {
    return (data?.inventories || []).map((i) => ({
      value: i.inventoryId,
      label: i.inventoryName || `Inventory ${i.inventoryId}`,
    }));
  }, [data]);

  const totals = useMemo(() => {
    const invs = data?.inventories || [];
    let orders = 0,
      items = 0,
      revenue = 0,
      stockQty = 0,
      stockItems = 0;
    invs.forEach((inv) => {
      orders += inv?.sales?.totals?.orders || 0;
      items += inv?.sales?.totals?.quantity || 0;
      revenue += inv?.sales?.totals?.revenue || 0;
      stockQty += inv?.stock?.totals?.totalQuantity || 0;
      stockItems += inv?.stock?.totals?.items || 0;
    });
    return { orders, items, revenue, stockQty, stockItems };
  }, [data]);

  function handlePreview() {
    const html = buildReceiptHTML(data || { inventories: [] }, {
      period,
      range: data?.range,
      asOf: new Date().toLocaleString(),
      title: 'Inventory Summary',
    });
    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    setPreviewUrl(url);
    setPreviewOpen(true);
  }

  function handlePrint() {
    const html = buildReceiptHTML(data || { inventories: [] }, {
      period,
      range: data?.range,
      asOf: new Date().toLocaleString(),
      title: 'Inventory Summary',
    });
    const w = window.open('', '_blank');
    if (!w) return;
    w.document.open();
    w.document.write(html);
    w.document.close();
    w.focus();
    // give it a tick to layout before printing
    setTimeout(() => { try { w.print(); } catch {} finally { /* keep tab so user can reprint if needed */ } }, 250);
  }

  return (
    <div className="space-y-5">
      {/* header / controls */}
      <div className="rounded-3xl border border-slate-200 bg-white/70 p-4 backdrop-blur">
        <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-slate-900">Summary</h1>
            <p className="text-sm text-slate-500">
              Uses only <code className="rounded bg-slate-100 px-1.5 py-0.5">/summary</code>. Preview or print a receipt of the KPIs and tables.
            </p>
          </div>

          <div className="flex flex-wrap items-center gap-2">
            <div className="flex items-center gap-2 rounded-xl border bg-white px-3 py-2.5 text-sm shadow-sm">
              <CalendarDays size={16} className="text-slate-400" />
              <select
                value={period}
                onChange={(e) => setPeriod(e.target.value)}
                className="bg-transparent outline-none"
              >
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
                <option value="all">All time</option>
              </select>
            </div>

            <select
              value={inventoryId}
              onChange={(e) => setInventoryId(e.target.value)}
              className="rounded-xl border bg-white px-3 py-2.5 text-sm shadow-sm outline-none"
            >
              <option value="">All inventories</option>
              {allInventories.map((i) => (
                <option key={i.value} value={i.value}>
                  {i.label}
                </option>
              ))}
            </select>

            <button
              onClick={fetchSummary}
              className="inline-flex items-center gap-2 rounded-xl border border-slate-300 bg-white px-3 py-2.5 text-sm text-slate-700 hover:bg-slate-100"
            >
              <RefreshCw size={16} /> Refresh
            </button>

            <button
              onClick={handlePreview}
              disabled={!data || (data?.inventories || []).length === 0}
              className="inline-flex items-center gap-2 rounded-xl border border-slate-300 bg-white px-3 py-2.5 text-sm text-slate-700 hover:bg-slate-100 disabled:opacity-60"
            >
              <Eye size={16} /> Preview
            </button>

            <button
              onClick={handlePrint}
              disabled={!data || (data?.inventories || []).length === 0}
              className="inline-flex items-center gap-2 rounded-xl bg-indigo-600 px-3 py-2.5 text-sm font-semibold text-white shadow hover:bg-indigo-700 disabled:opacity-60"
            >
              <Printer size={16} /> Print
            </button>
          </div>
        </div>

        {(err || (!loading && !data)) && (
          <div className="mt-3 rounded-lg border border-rose-200 bg-rose-50 px-3 py-2 text-rose-700">
            {err || 'Error loading summary'}
          </div>
        )}
      </div>

      {/* KPI cards */}
      <div className="grid gap-4 md:grid-cols-4">
        {[
          { label: 'Orders', value: fmtInt(totals.orders) },
          { label: 'Items sold', value: fmtInt(totals.items) },
          { label: 'Revenue', value: fmtMoney(totals.revenue) },
          { label: 'Stock (qty / items)', value: `${fmtInt(totals.stockQty)} / ${fmtInt(totals.stockItems)}` },
        ].map((k) => (
          <div key={k.label} className="rounded-2xl border border-slate-200 bg-white/70 p-4">
            <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">{k.label}</div>
            <div className="mt-2 text-3xl font-bold text-slate-900">{k.value}</div>
          </div>
        ))}
      </div>

      {/* inventories list (simple, keeps layout light) */}
      <div className="overflow-hidden rounded-2xl border border-slate-200 bg-white/70">
        <div className="grid grid-cols-[1.2fr_.8fr_.8fr_.8fr_.8fr] items-center gap-3 border-b border-slate-200 px-4 py-3 text-xs font-semibold uppercase tracking-wide text-slate-500">
          <span>Inventory</span>
          <span>Orders</span>
          <span>Items</span>
          <span>Revenue</span>
          <span>Stock (qty / items)</span>
        </div>

        {loading ? (
          <div className="p-4">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="mb-2 h-12 animate-pulse rounded-xl border border-slate-200 bg-white/60" />
            ))}
          </div>
        ) : (
          <ul className="divide-y divide-slate-200">
            {(data?.inventories || []).map((inv) => (
              <li key={inv.inventoryId} className="grid grid-cols-[1.2fr_.8fr_.8fr_.8fr_.8fr] items-center gap-3 px-4 py-3">
                <div className="font-medium text-slate-900">{inv.inventoryName || `Inventory ${inv.inventoryId}`}</div>
                <div>{fmtInt(inv?.sales?.totals?.orders || 0)}</div>
                <div>{fmtInt(inv?.sales?.totals?.quantity || 0)}</div>
                <div>{fmtMoney(inv?.sales?.totals?.revenue || 0)}</div>
                <div>
                  {fmtInt(inv?.stock?.totals?.totalQuantity || 0)} / {fmtInt(inv?.stock?.totals?.items || 0)}
                </div>
              </li>
            ))}
            {(data?.inventories || []).length === 0 && (
              <li className="px-4 py-6 text-center text-slate-500">No data for this selection.</li>
            )}
          </ul>
        )}
      </div>

      {/* Preview modal */}
      <Modal open={previewOpen} title="Print Preview" onClose={() => setPreviewOpen(false)}>
        {previewUrl ? (
          <iframe title="preview" src={previewUrl} className="h-full w-full" />
        ) : (
          <div className="grid h-full place-items-center text-slate-500">Preparing preview…</div>
        )}
      </Modal>
    </div>
  );
}